-------------VF:CHEAT SHEETS--------------

imp link: https://trailhead.salesforce.com/content/learn/modules/visualforce_fundamentals/visualforce_creating_pages


>>Basic VF form------

	<apex:page standardController="Contact" >
		<apex:form >
			
			<apex:pageBlock title="Edit Contact">
				<apex:pageBlockSection columns="1">
					<apex:inputField value="{!Contact.FirstName}"/>
					<apex:inputField value="{!Contact.LastName}"/>
					<apex:inputField value="{!Contact.Email}"/>
					<apex:inputField value="{!Contact.Birthdate}"/>
				</apex:pageBlockSection>
				<apex:pageBlockButtons >
					<apex:commandButton action="{!save}" value="Save"/>
				</apex:pageBlockButtons>
			</apex:pageBlock>
			
		</apex:form>
	</apex:page>


>>First VF Page
	<apex:page> 
		<h1>Hello World</h1> 
	</apex:page>
	
default styling false
<apex:page sidebar="false" showHeader="false" standardStylesheets="false"> 
    <h1>Hello World</h1> 
</apex:page>


<apex:page> 
    <h1>Hello World</h1> 
    
    <apex:pageBlock title="A Block Title">
        <apex:pageBlockSection title="A Section Title">
            I'm three components deep!
			<apex:pageBlockSectionItem>
				hey item
			</apex:pageBlockSectionItem>
			
			<apex:pageBlockButtons>
				hey button
			</apex:pageBlockButtons>
			
        </apex:pageBlockSection>
    </apex:pageBl
	
>>EXPRESSIONS----------------------------------------------------------
------------------------------------------------------------------

	>The expression syntax in Visualforce is: {! expression }
	>You can access fields of the $User global variable (and any others) using an expression of the following form: {! $GlobalName.fieldName }.
	
	
	EG:
		<h1>{! $User.FirstName & ' ' & $User.LastName }</h1>

		<p>The year today is {! YEAR(TODAY()) }</p>

	
		<p>Tomorrow will be day number  {! DAY(TODAY() + 1) }</p>
	
		<p>Let's find a maximum: {! MAX(1,2,3,4,5,6,5,4,3,2,1) } </p>

		<p>The square root of 49 is {! SQRT(49) }</p>

		<p>Is it true?  {! CONTAINS('salesforce.com', 'force.com') }</p>
		
	>>condition statements
		<p>{! IF( CONTAINS('salesforce.com','force.com'), 
			 'Yep', 'Nope') }</p>
		<p>{! IF( DAY(TODAY()) < 15, 
			 'Before the 15th', 'The 15th or after') }</p>
			 
			 
	eg:
		({! IF($User.isActive, $User.Username, 'inactive') })
		
		
	There are nearly two dozen global variables that can be used within Visualforce. They’re useful for getting information about the currently logged in user, as you saw, but also for getting details about the organization ($Organization), settings ($Setup), details about custom objects ($ObjectType), actions available on those objects ($Action), and so on. See the Visualforce global variables reference to dive in.
	
	LINK: https://developer.salesforce.com/docs/atlas.en-us.216.0.pages.meta/pages/pages_variables_global.htm
	LINK: https://developer.salesforce.com/docs/atlas.en-us.216.0.pages.meta/pages/pages_variables_functions.htm
	
>>standard controller

	<apex:detail />
	<apex:detail relatedList="false"/>
	<apex:relatedList list="Contacts"/>
	<apex:relatedList list="Opportunities" pageSize="5"/>
	
	<apex:outputField value="{! Account.Name }"/>
	<apex:outputField value="{! Account.Phone }"/>
	<apex:outputField value="{! Account.Industry }"/>
	<apex:outputField value="{! Account.AnnualRevenue }"/>
	
	Eg:
	
		<apex:page standardController="Account">
			<apex:pageBlock title="Account Details">
				<apex:pageBlockSection>
					<apex:outputField value="{! Account.Name }"/>
					<apex:outputField value="{! Account.Phone }"/>
					<apex:outputField value="{! Account.Industry }"/>
					<apex:outputField value="{! Account.AnnualRevenue }"/>
				</apex:pageBlockSection>
			</apex:pageBlock>    
		</apex:page>
	
	
		<apex:pageBlock title="Contacts">
			   <apex:pageBlockTable value="{!Account.contacts}" var="contact">
				  <apex:column value="{!contact.Name}"/>
				  <apex:column value="{!contact.Title}"/>
				  <apex:column value="{!contact.Phone}"/>
			   </apex:pageBlockTable>
		</apex:pageBlock>
		
		<apex:pageBlock title="Contacts">
		   <apex:pageBlockTable value="{!Account.contacts}" var="contact">
			  <apex:column value="{!contact.Name}"/>
			  <apex:column value="{!contact.Title}"/>
			  <apex:column value="{!contact.Phone}"/>
		   </apex:pageBlockTable>
		</apex:pageBlock>
		
		
		Coarse-grained components let you quickly add lots of functionality to a page, while fine-grained components give you more control over the specific details of a page.
		<apex:enhancedList> and <apex:listViews> are other coarse-grained components that you might want to use with or in place of <apex:relatedList>. And there are many other components that pack a lot of functionality into a single tag. If you haven’t done it yet, check out the Standard Component Reference and see what the range of possibilities are.

		<apex:pageBlockTable> is an iteration component that picks up Salesforce Classic styling. <apex:dataTable> and <apex:dataList> are iteration components for creating tables and lists without styling. And <apex:repeat> is an iteration component that you can use to generate any arbitrary markup for a collection of records.

		You may have noticed that your manually created related lists are missing some things that were added to the table created by <apex:relatedList>. For example, the Edit and Del links to edit and delete individual records is missing, and so is the New Contact button. To create these user interface elements you need to know a little more Visualforce, specifically about forms and actions. You’ll learn about that elsewhere.
		
		
---------------intro: VF forms-------------------------
<apex:page standardController="Account">
    <apex:form>
    
    <apex:pageBlock title="Edit Account">
        <apex:pageBlockSection>
            <apex:inputField value="{! Account.Name }"/>
            <apex:inputField value="{! Account.Phone }"/>        
    		<apex:inputField value="{! Account.Industry }"/>        
    		<apex:inputField value="{! Account.AnnualRevenue }"/>
        </apex:pageBlockSection>
        <apex:pageBlockButtons>
            <apex:commandButton action="{! save }" value="Save" />        
        </apex:pageBlockButtons>
    </apex:pageBlock>
        
    <apex:pageBlock title="Contacts">
            <apex:pageBlockTable value="{!Account.contacts}" var="contact">
                <apex:column>
                    <apex:outputLink
                        value="{! URLFOR($Action.Contact.Edit, contact.Id) }">
                        Edit
                    </apex:outputLink>
                    &nbsp;
                    <apex:outputLink
                        value="{! URLFOR($Action.Contact.Delete, contact.Id) }">
                        Del
                    </apex:outputLink>
                </apex:column>
                <apex:column value="{!contact.Name}"/>
                <apex:column value="{!contact.Title}"/>
                <apex:column value="{!contact.Phone}"/>
            </apex:pageBlockTable>
		</apex:pageBlock>
    
    </apex:form>
</apex:page>


	>created by me-----------
		<apex:page standardController="Contact">
			<apex:form>
			<apex:pageBlock title = "create contact">
			
				<apex:pageBlockSection>
					<apex:inputField value = "{!Contact.FirstName}" required="true"/>
					<apex:inputField value = "{!Contact.LastName}"/>            
					<apex:inputField value = "{!Contact.Email}"/>        	
				</apex:pageBlockSection>
				
				<apex:pageBlockButtons>
					<apex:commandButton action="{! save}" value = "sacve contact" />
				</apex:pageBlockButtons>
				
				
			</apex:pageBlock>
			</apex:form>
			
		</apex:page>
		
--------------------------------------------------------STANDARD LIST CONTROLLER---------------------------------

code with filter and iteration of the list and pagination

<apex:page standardController="Contact" recordSetVar="contacts">
    <apex:form>
        <apex:pageBlock title="Contacts List" id="contacts_list">
        
            Filter: 
            <apex:selectList value="{! filterId }" size="1">
                <apex:selectOptions value="{! listViewOptions }"/>
                <apex:actionSupport event="onchange" reRender="contacts_list"/>
            </apex:selectList>
            <!-- Contacts List -->
            <apex:pageBlockTable value="{! contacts }" var="ct">
                <apex:column value="{! ct.FirstName }"/>
                <apex:column value="{! ct.LastName }"/>
                <apex:column value="{! ct.Email }"/>
                <apex:column value="{! ct.Account.Name }"/>
            </apex:pageBlockTable>
            
            <!-- Pagination -->
            <table style="width: 100%"><tr>
                <td>
					Page: <apex:outputText 
    				value=" {!PageNumber} of {! CEILING(ResultSize / PageSize) }"/>
                </td>            
                <td align="center">
                    <!-- Previous page -->
                    <!-- active -->
                    <apex:commandLink action="{! Previous }" value="« Previous"
                         rendered="{! HasPrevious }"/>
                    <!-- inactive (no earlier pages) -->
                    <apex:outputText style="color: #ccc;" value="« Previous"
                         rendered="{! NOT(HasPrevious) }"/>
                    &nbsp;&nbsp;  
                    <!-- Next page -->
                    <!-- active -->
                    <apex:commandLink action="{! Next }" value="Next »"
                         rendered="{! HasNext }"/>
                    <!-- inactive (no more pages) -->
                    <apex:outputText style="color: #ccc;" value="Next »"
                         rendered="{! NOT(HasNext) }"/>
                </td>
                
                <td align="right">
                    <apex:selectList value="{! PageSize }" size="1">
                        <apex:selectOption itemValue="5" itemLabel="5"/>
                        <apex:selectOption itemValue="20" itemLabel="20"/>
                        <apex:actionSupport event="onchange" reRender="contacts_list"/>
                    </apex:selectList>
                </td>
            </tr></table>
            
        </apex:pageBlock>
    </apex:form>
</apex:page>
	
-----------------------created by me------------------
	
<apex:page standardController="Account" recordSetVar="accounts">
    <ul>
    <apex:repeat value="{! accounts}" var="a" >
        <li><apex:outputLink value="/{!a.id}">{!a.Name}</apex:outputLink></li>
   </apex:repeat>
    </ul>
</apex:page>




-------------------------------static resources------------------------
----------------------------------------------------------------
	install first from ui setup>static Resource>new
	
    <apex:includeScript value="{! $Resource.jQuery }"/>
	
	<apex:page showHeader="false" sidebar="false" standardStylesheets="false">
    
    <!-- Add static resources to page's <head> -->
    <apex:stylesheet value="{!
          URLFOR($Resource.jQueryMobile,'jquery.mobile-1.4.5/jquery.mobile-1.4.5.css')}"/>
    <apex:includeScript value="{! $Resource.jQuery }"/>
    <apex:includeScript value="{!
         URLFOR($Resource.jQueryMobile,'jquery.mobile-1.4.5/jquery.mobile-1.4.5.js')}"/>
    <div style="margin-left: auto; margin-right: auto; width: 50%">
        <!-- Display images directly referenced in a static resource -->
        <h3>Images</h3>
        <p>A hidden message:
            <apex:image alt="eye" title="eye"
                 url="{!URLFOR($Resource.jQueryMobile, 'jquery.mobile-1.4.5/images/icons-png/eye-black.png')}"/>
            <apex:image alt="heart" title="heart"
                 url="{!URLFOR($Resource.jQueryMobile, 'jquery.mobile-1.4.5/images/icons-png/heart-black.png')}"/>
            <apex:image alt="cloud" title="cloud"
                 url="{!URLFOR($Resource.jQueryMobile, 'jquery.mobile-1.4.5/images/icons-png/cloud-black.png')}"/>
        </p>
    <!-- Display images referenced by CSS styles,
         all from a static resource. -->
    <h3>Background Images on Buttons</h3>
    <button class="ui-btn ui-shadow ui-corner-all
         ui-btn-icon-left ui-icon-action">action</button>
    <button class="ui-btn ui-shadow ui-corner-all
         ui-btn-icon-left ui-icon-star">star</button>
    </div>
</apex:page>



--------------------------------custom controller-------------
-----------------------------------------------------------

<apex:page controller="ContactsListController">
    <apex:form>
        <apex:pageBlock title="Contacts List" id="contacts_list">
            
           <apex:pageBlockTable value="{! contacts }" var="ct">
                <apex:column value="{! ct.FirstName }">
                    <apex:facet name="header">
                        <apex:commandLink action="{! sortByFirstName }" 
                            reRender="contacts_list">First Name
                        </apex:commandLink>
                    </apex:facet>
                </apex:column>
                <apex:column value="{! ct.LastName }">
                    <apex:facet name="header">
                        <apex:commandLink action="{! sortByLastName }" 
                            reRender="contacts_list">Last Name
                        </apex:commandLink>
                    </apex:facet>
				</apex:column>
                
			</apex:pageBlockTable>
        </apex:pageBlock>
    </apex:form>
</apex:page>


The header text for the first name and last name columns is hard-coded in this markup. But what if your users don’t all use English? The standard Salesforce user interface has translated versions of the field names for all standard objects, and you can provide your own translations for custom objects. How would you access these? Instead of the plain text, try this markup: <apex:outputText value="{! $ObjectType.Contact.Fields.FirstName.Label }"/>. That’s the right way to reference a field’s label, even if your organization all uses the same language, because it will automatically update if the field name is ever changed.

public MyObject__c myVariable { get; set; }
